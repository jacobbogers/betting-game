{
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "test",
    "**/__test__"
  ],
  "typeAcquisition": {
    "enable": true
  },
  "compilerOptions": {
    "module": "CommonJS",
    "outDir": "commonjs",
    "allowJs": true,
    "checkJs": true,
    "composite": false,
    "declaration": true, // generate declaration files, make sure they go into a declarationDir
    "declarationMap": true, // make map files for .d.ts files
    "downlevelIteration": false, // let babble handle it
    "importHelpers": false, 
    "incremental": true,
    "lib": [
      "es2017",
      "es2020",
      "es2018",
      "es2017.string",
      "dom"
    ],
    "plugins": [
      {
        "name": "typescript-eslint-language-service"
      },
      {
        "transform": "typescript-transform-paths"
      },
      {
        "transform": "typescript-transform-paths",
        "afterDeclarations": true
      }
    ],
    "removeComments": false,
    "rootDir": "./src",
    "sourceMap": true, // not sure if this should be turned on if you use babel
    "target": "ES2017", // no down transpiling , that is for babel
    "strict": true,
    "alwaysStrict": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "strictBindCallApply": true,
    "strictFunctionTypes": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    /* MODULE RESOLUTION */
    /* MODULE RESOLUTION */
    /* MODULE RESOLUTION */
    //https://www.typescriptlang.org/tsconfig#Module_Resolution_Options_6174
    //
    "allowSyntheticDefaultImports": false,
    "allowUmdGlobalAccess": false,
    "baseUrl": "./src", // because src needs to be accessible by test
    "esModuleInterop": false, // let babble handle this issue
    "moduleResolution": "node",
    // source maps
    "preserveSymlinks": true, // keep it around just in case
    "typeRoots": [
      "./node_modules/@types/"
    ],
    /* SOURCE MAPS */
    /* SOURCE MAPS */
    /* SOURCE MAPS */
    // https://www.typescriptlang.org/tsconfig#Source_Map_Options_6175
    "inlineSourceMap": false,
    "inlineSources": false,
    // "mapRoot": "http://someurl/debug/sourcemaps" use it? will be handled by babble?
    /* "sourceRoot" will be the url needed to find the original ts files
          this allows for debugging through original ts files
        */
    // "sourceRoot: "http://someurl/debug/sources" use it? will be handled by babble?
    /* LINTER CHECKS */
    /* LINTER CHECKS */
    /* LINTER CHECKS */
    // https://www.typescriptlang.org/tsconfig#Source_Map_Options_6175
    "noImplicitReturns": false, // allow for it
    // forget it "noUncheckedIndexedAccess": true,
    "noUnusedLocals": true,
    "noUnusedParameters": false,
    /* EXPERIMENTAL */
    /* EXPERIMENTAL */
    /* EXPERIMENTAL */
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    /* ADVANCED */
    /* ADVANCED */
    /* ADVANCED */
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "assumeChangesOnlyAffectDirectDependencies": false, // be on the safe side, you might not see all compiler errors otherwise
    // "bundledPackageName": "blasjs", // ts-node problem i think, the bundled package name if you want to export types like "blasjs/typedArrayReal",
    "noFallthroughCasesInSwitch": false, // fall through is ok
    // "declarationDir": "./es6/types", // emit types here
    //"disableReferencedProjectLoad": true, handy for "projects" based setup
    "disableSizeLimit": true,
    "disableSolutionSearching": false, // i want my IDE to find decl's
    // from ts 3.7 the source of truth is the ts files themselves, 
    "disableSourceOfProjectReferenceRedirect": false,
    "emitBOM": false, //omg no
    "emitDeclarationOnly": false, // should this be true if i am using babble?
    "extendedDiagnostics": true, //always
    "forceConsistentCasingInFileNames": true, // fuck windows, enforce casing!
    // "generateCpuProfile": true, not sure to use this, or how
    "importsNotUsedAsValues": "remove", // remove import type when transpiling
    "listEmittedFiles": true, //change back to true print names of generated files to the terminal
    // also list files from node_modules ec (according to documentation,never checked it)
    "listFiles": true, //change back to true
    // list files 
    "maxNodeModuleJsDepth": 0, // no limitation on search dept, ..ever
    "newLine": "LF", // unix
    "noEmitHelpers": true, // dont emit helpers, babble should handle it
    "noErrorTruncation": false, // the doc dont show the diff between true or false 
    "noImplicitUseStrict": false, // let ts emit "use strict" prologue at top of emitted files
    "noLib": false, // dont ignore "lib" setting, false= enable automatic inclusion of library (d.ts?) files
    "noResolve": false, // add resolved files (import, <reference) to the program
    "noStrictGenericChecks": false, // do not disable this check
    "preserveConstEnums": false, // do not preserve the enum at runtime
    //"reactNamespace": "React", not used here
    "resolveJsonModule": true, // infer type of json data when imported
    "skipDefaultLibCheck": false, // always type check default libs
    "skipLibCheck": true, // only type check the stuff you import from other libs
    "stripInternal": true, // exports marked @internal (in their jsdoc) will not have their type exported
    "suppressExcessPropertyErrors": false, // do not suppress
    "suppressImplicitAnyIndexErrors": false, // absolutely not suppress
    "traceResolution": false, // only use if you want to debug/trace why a file was (not) included (module resolution)
    "useDefineForClassFields": true // switch to using class definition of TC39 not what typescript implementation
  }
}